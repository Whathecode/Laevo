<UserControl
	x:Name="Control"
	x:Class="Laevo.View.Activity.ActivityControl"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:system="clr-namespace:System;assembly=mscorlib"
	xmlns:converters="clr-namespace:Laevo.View.Activity.Converters"
	xmlns:wtcConverters="clr-namespace:Whathecode.System.Windows.Data;assembly=Whathecode.PresentationFramework"
	xmlns:wtc="clr-namespace:Whathecode.System.Windows.Input.CommandFactory;assembly=Whathecode.PresentationFramework"
	xmlns:b="clr-namespace:Laevo.ViewModel.Activity.Binding"
	xmlns:behaviors="clr-namespace:Whathecode.System.Xaml.Behaviors;assembly=Whathecode.PresentationFramework"
	xmlns:activityOverview="clr-namespace:Laevo.View.ActivityOverview"
	xmlns:activity="clr-namespace:Laevo.View.Activity"
	xmlns:linkedActivity="clr-namespace:Laevo.ViewModel.Activity.LinkedActivity"
	mc:Ignorable="d"
	d:DesignHeight="118" d:DesignWidth="206"
	d:DataContext="{d:DesignInstance Type=linkedActivity:LinkedActivityViewModel}"
	Panel.ZIndex="10"
	activityOverview:TimeLineControl.Occurance="{Binding Occurance}"
	activityOverview:TimeLineControl.TimeSpan="{Binding TimeSpan}"
	ClipToBounds="False">

	<activityOverview:TimeLineControl.Offset>
		<MultiBinding Mode="TwoWay">
			<MultiBinding.Converter>
				<converters:ActivityOffsetConverter />
			</MultiBinding.Converter>
			<Binding Path="OffsetPercentage" Mode="TwoWay" />
			<Binding Path="ActualHeight">
				<Binding.RelativeSource>
					<RelativeSource Mode="FindAncestor" AncestorType="{x:Type FrameworkElement}" AncestorLevel="2" />
				</Binding.RelativeSource>
			</Binding>
			<Binding Path="HeightPercentage" />
		</MultiBinding>
	</activityOverview:TimeLineControl.Offset>

	<UserControl.MinWidth>
		<MultiBinding
			Converter="{wtcConverters:ConditionConverter Expression='([0] || [1]) and [2] &lt;= 25', IfTrue=25, IfFalse=2, Type={x:Type system:Double}}">
			<Binding ElementName="Container" Path="IsMouseOver" />
			<Binding ElementName="Buttons" Path="IsMouseOver" />
			<Binding ElementName="Control" Path="ActualWidth" />
		</MultiBinding>
	</UserControl.MinWidth>

	<UserControl.Resources>
		<converters:ActivityColorConverter x:Key="ActivityColorConverter" />
		<converters:ActivityBorderConverter x:Key="ActivityBorderConverter" />
		<converters:ActivityBorderThicknessConverter x:Key="ActivityBorderThicknessConverter" />
		<converters:ActivityIconMarginConverter x:Key="ActivityIconMarginConverter" />
		<converters:ActivityDownIconMarginConverter x:Key="ActivityDownIconMarginConverter" />
		<converters:ActivityHeightConverter x:Key="ActivityHeightConverter" />
		<converters:ActivityCornerRadiusConverter x:Key="ActivityCornerRadiusConverter" />
		<converters:ActivityDashedBorderThicknessConverter x:Key="ActivityDashedBorderThicknessConverter" />
	</UserControl.Resources>

	<StackPanel
		Orientation="Vertical"
		DataContext="{Binding BaseActivity}">

		<Canvas
			x:Name="Header"
			Panel.ZIndex="20"
			Height="{Binding ElementName=Image, Path=ActualHeight, Converter={wtcConverters:CalculateValueConverter Operation=Division, Value=2}}">

			<!-- Icon and text. -->
			<StackPanel Orientation="Horizontal">
				<Image
					x:Name="Image"
					Source="{Binding Path=Icon}"
					Stretch="None"
					Cursor="Hand"
					PreviewMouseDown="OnPreviewMouseDown"
					behaviors:MouseBehavior.LeftClickCommand="{wtc:CommandBinding {x:Static b:Commands.SelectActivity}}">
					<Image.Margin>
						<MultiBinding Converter="{StaticResource ActivityIconMarginConverter}">
							<Binding ElementName="Image" Path="ActualWidth" />
							<Binding ElementName="Image" Path="ActualHeight" />
						</MultiBinding>
					</Image.Margin>
				</Image>

				<Image
					Source="../Activity/ActionIcons/linked.png"
					Stretch="None"
					Cursor="Hand"
					Margin="-56, 23, 0, 0"
					Visibility="{Binding
						ElementName=Control,
						Path=DataContext.Position,
						Converter={wtcConverters:EnumHasFlagConverter Flag={x:Static linkedActivity:ActivityPosition.End}, IfTrue={x:Static Visibility.Collapsed}, IfFalse={x:Static Visibility.Visible}}}" />


				<TextBox
					x:Name="ActivityName"
					Background="Transparent"
					BorderBrush="Transparent"
					Foreground="White"
					CaretBrush="White"
					FontSize="20"
					Text="{Binding Path=Label}"
					Margin="5, -13, 0, 0"
					PreviewKeyDown="LabelKeyDown">
					<TextBox.Template>
						<ControlTemplate TargetType="{x:Type TextBox}">
							<ScrollViewer Name="PART_ContentHost" />
						</ControlTemplate>
					</TextBox.Template>
				</TextBox>

			</StackPanel>
			
			<Image
				DataContext="{Binding ElementName=Control, Path=DataContext}"
				Source="../Activity/ActionIcons/Calendar.png"
				Stretch="None"
				Cursor="Hand"
				PreviewMouseDown="OnPreviewMouseDown"
				Visibility="{Binding IsPlanned,
									Converter={wtcConverters:SingleConditionConverter Expression='[0]', 
									IfTrue={x:Static Visibility.Visible}, IfFalse={x:Static Visibility.Hidden}}}" >
				<Image.Margin>
					<MultiBinding Converter="{StaticResource ActivityDownIconMarginConverter}">
						<Binding ElementName="Image" Path="ActualWidth" />
						<Binding ElementName="Image" Path="ActualHeight" />
						<Binding ElementName="Control" Path="ActualHeight" />
					</MultiBinding>
				</Image.Margin>
			</Image>

			<!-- Action buttons. -->
			<!-- TODO: Disable start stop buttons in previous activity parts. -->
			<!-- ShowStartButton="{Binding ElementName=Control, Path=DataContext.Position, Converter={StaticResource ActivityShowStartButtonConverter}}">-->
			<activity:ActionButtons x:Name="Buttons">
				<activity:ActionButtons.Visibility>
					<MultiBinding
						Converter="{wtcConverters:ConditionConverter Expression='([0] || [1]) and ![2]', IfTrue={x:Static Visibility.Visible}, IfFalse={x:Static Visibility.Collapsed}}">
						<Binding ElementName="Container" Path="IsMouseOver" />
						<Binding ElementName="Buttons" Path="IsMouseOver" />
						<Binding ElementName="Control" Path="IsDraggingActivity" />
					</MultiBinding>
				</activity:ActionButtons.Visibility>
			</activity:ActionButtons>

		</Canvas>

		<Border
			x:Name="Container"
			behaviors:MouseBehavior.LeftClickCommand="{wtc:CommandBinding {x:Static b:Commands.SelectActivity}}"
			behaviors:MouseBehavior.LeftClickDragCommand="{Binding ElementName=Control, Path=MouseDragged}"
			MouseMove="OnMouseMoved"
			Cursor="Hand"
			Panel.ZIndex="15"
			ClipToBounds="True"
			AllowDrop="True"
			Drop="OnTaskDropped">

			<Border.CornerRadius>
				<MultiBinding
					Converter="{StaticResource ActivityCornerRadiusConverter}">
					<Binding Path="IsOpen" />
					<Binding ElementName="Control" Path="DataContext.Position" />
					<Binding ElementName="Control" Path="DataContext.IsPlanned" />
				</MultiBinding>
			</Border.CornerRadius>

			<Border.BorderThickness>
				<MultiBinding
					Converter="{StaticResource ActivityBorderThicknessConverter}">
					<Binding Path="IsOpen" />
					<Binding ElementName="Control" Path="DataContext.Position" />
				</MultiBinding>
			</Border.BorderThickness>

			<Border.BorderBrush>
				<MultiBinding Converter="{StaticResource ActivityBorderConverter}">
					<Binding Path="IsActive" />
					<Binding Path="IsOpen" />
					<Binding Path="HasOpenWindows" />
					<Binding Path="HasUnattendedInterruptions" />
				</MultiBinding>
			</Border.BorderBrush>

			<Border.Height>
				<MultiBinding Converter="{StaticResource ActivityHeightConverter}">
					<Binding ElementName="Control" Path="DataContext.HeightPercentage" />
					<Binding ElementName="Header" Path="ActualHeight" />
					<Binding Path="ActualHeight">
						<Binding.RelativeSource>
							<RelativeSource Mode="FindAncestor" AncestorType="{x:Type FrameworkElement}" AncestorLevel="5" />
						</Binding.RelativeSource>
					</Binding>
				</MultiBinding>
			</Border.Height>

			<Border.Background>
				<LinearGradientBrush StartPoint="0, 0" EndPoint="1, 0">
					<GradientStop
						Color="{Binding Color}" Offset="1" />
					<GradientStop
						Color="{Binding Color, Converter={StaticResource ActivityColorConverter}}" Offset="0" />
				</LinearGradientBrush>
			</Border.Background>

			<Border.Resources>
				<converters:TimeSpanConverter x:Key="TimeSpanConverter" />
				<wtcConverters:CalculateValueConverter x:Key="Subtractor" Value="8" Operation="Subtraction" />
				<DataTemplate x:Key="TimeSpanTemplate">
					<Line
						Y1="{Binding ElementName=Container, Path=ActualHeight, Converter={StaticResource Subtractor}}"
						Y2="{Binding ElementName=Container, Path=ActualHeight, Converter={StaticResource Subtractor}}"
						Stroke="Yellow" StrokeThickness="4">

						<Line.X1>
							<MultiBinding
								Converter="{StaticResource TimeSpanConverter}"
								ConverterParameter="Start">
								<Binding Path="." />
								<Binding ElementName="Control" Path="DataContext.Occurance" />
								<Binding ElementName="Control" Path="DataContext.TimeSpan" />
								<Binding ElementName="Container" Path="ActualWidth" />
							</MultiBinding>
						</Line.X1>
						<Line.X2>
							<MultiBinding
								Converter="{StaticResource TimeSpanConverter}"
								ConverterParameter="End">
								<Binding Path="." />
								<Binding ElementName="Control" Path="DataContext.Occurance" />
								<Binding ElementName="Control" Path="DataContext.TimeSpan" />
								<Binding ElementName="Container" Path="ActualWidth" />
							</MultiBinding>
						</Line.X2>
					</Line>
				</DataTemplate>
			</Border.Resources>

			<Border
				BorderThickness="{Binding ElementName=Control, Path=DataContext.Position, Converter={StaticResource ActivityDashedBorderThicknessConverter}}">

				<Border.BorderBrush>
					<VisualBrush>
						<VisualBrush.Visual>
							<Rectangle
								StrokeThickness="4"
								StrokeDashArray="2 2"
								Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
								Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualHeight}">

								<Rectangle.Stroke>
									<MultiBinding Converter="{StaticResource ActivityBorderConverter}">
										<Binding Path="IsActive" />
										<Binding Path="IsOpen" />
										<Binding Path="HasOpenWindows" />
										<Binding Path="HasUnattendedInterruptions" />
									</MultiBinding>
								</Rectangle.Stroke>

							</Rectangle>
						</VisualBrush.Visual>
					</VisualBrush>
				</Border.BorderBrush>

				<!-- Attention time spans. -->
				<ItemsControl
					Visibility="{Binding ShowActiveTimeSpans, Converter={wtcConverters:FromBooleanConverter IfTrue={x:Static Visibility.Visible}, IfFalse={x:Static Visibility.Collapsed}}}"
					ItemTemplate="{StaticResource TimeSpanTemplate}">

					<ItemsControl.Style>
						<Style TargetType="ItemsControl">
							<Style.Triggers>
								<Trigger Property="ItemsControl.Visibility" Value="Visible">
									<Setter Property="ItemsSource" Value="{Binding ActiveTimeSpans}" />
								</Trigger>
								<Trigger Property="ItemsControl.Visibility" Value="Hidden">
									<Setter Property="ItemsSource" Value="{x:Null}" />
								</Trigger>
								<Trigger Property="ItemsControl.Visibility" Value="Collapsed">
									<Setter Property="ItemsSource" Value="{x:Null}" />
								</Trigger>
							</Style.Triggers>
						</Style>
					</ItemsControl.Style>

					<ItemsControl.ItemsPanel>
						<ItemsPanelTemplate>
							<Canvas />
						</ItemsPanelTemplate>
					</ItemsControl.ItemsPanel>
				</ItemsControl>
			</Border>
		</Border>
	</StackPanel>

</UserControl>
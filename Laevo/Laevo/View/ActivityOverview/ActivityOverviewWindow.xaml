<Window
	x:Name="Control"
	x:Class="Laevo.View.ActivityOverview.ActivityOverviewWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:activityOverview="clr-namespace:Laevo.View.ActivityOverview"	
	xmlns:binding="clr-namespace:Laevo.ViewModel.ActivityOverview.Binding"
	xmlns:taskList="clr-namespace:Laevo.View.TaskList"
	xmlns:behaviors="clr-namespace:Whathecode.System.Xaml.Behaviors;assembly=Whathecode.PresentationFramework"
	xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	xmlns:converters="clr-namespace:Laevo.View.ActivityOverview.Converters"
	xmlns:vm="clr-namespace:Laevo.ViewModel.ActivityOverview"
	xmlns:wtcConverters="clr-namespace:Whathecode.System.Windows.Data;assembly=Whathecode.PresentationFramework"
	xmlns:pf="clr-namespace:Whathecode.System.Windows.Input.CommandFactory;assembly=Whathecode.PresentationFramework"
	xmlns:wtcControls="clr-namespace:Whathecode.System.Windows.Controls;assembly=Whathecode.PresentationFramework"
	xmlns:timeline="clr-namespace:Whathecode.TimeLine;assembly=Whathecode.TimeLine"
	xmlns:activityVm="clr-namespace:Laevo.ViewModel.Activity"
	xmlns:controls="clr-namespace:Laevo.View.Activity"
	xmlns:system="clr-namespace:System;assembly=mscorlib"
	xmlns:activityConverters="clr-namespace:Laevo.View.Activity.Converters"
	mc:Ignorable="d"
	d:DataContext="{d:DesignInstance Type=vm:ActivityOverviewViewModel}"
	Title="Laevo Activity Time Line"
	WindowStyle="None"
	WindowState="Maximized"
	ShowInTaskbar="False"
	FontFamily="Segoe UI Light"
	FontSize="20"
	Foreground="White"
	Topmost="{Binding ActivityMode, Converter={wtcConverters:EnumHasFlagConverter Flag={x:Static vm:Mode.Edit}, IfTrue=False, IfFalse=True}}">

	<Window.Resources>
		<LinearGradientBrush x:Key="PersonalActivitiesBrush" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
			<GradientStop Color="#606c88" Offset="0" />
			<GradientStop Color="#2D3340" Offset="1" />
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="HierarchiesActivitiesBrush" StartPoint="0,0" EndPoint="0,1" options:Freeze="True">
			<GradientStop Color="#909090" Offset="0" />
			<GradientStop Color="#404040" Offset="1" />
		</LinearGradientBrush>
		<SolidColorBrush x:Key="TimeLineBrush" Color="Transparent" options:Freeze="True" />
		
		<converters:AspectRatioToGeometryConverter x:Key="AspectRatioToPositions" />
		<converters:AspectRatioToFovConverter x:Key="AspectRatioToFov" />
		<converters:AspectRatioToTransformOffset x:Key="AspectRatioToTransformOffset" />
		<converters:TimeLineWidthConverter x:Key="TimeLineWidthConverter" />
		<converters:TimeLineHeightConverter x:Key="TimeLineHeightConverter" />
	</Window.Resources>
	
	<Grid
		x:Name="Container2D"
		Background="{Binding ActivityMode, Converter={wtcConverters:EnumHasFlagConverter
			Flag={x:Static vm:Mode.Activate},
			IfTrue={StaticResource PersonalActivitiesBrush},
			IfFalse={StaticResource HierarchiesActivitiesBrush}}}"
		behaviors:MouseBehavior.LeftClickDragCommand="{Binding ElementName=Control, Path=MoveTimeLineCommand}"
		behaviors:MouseBehavior.DragCapturesMouse="True"
		MouseWheel="OnMouseWheel">

		<Grid.CacheMode>
			<BitmapCache />
		</Grid.CacheMode>

		<!-- Blur effect for popups. -->
		<!-- TODO: Disable based on preferences or system specs. Possibly: http://blogs.msdn.com/b/henryh/archive/2006/08/23/719568.aspx -->
		<!--<Grid.Effect>
			<BlurEffect Radius="0" RenderingBias="Performance" />
		</Grid.Effect>
		<Grid.Style>
			<Style>
				<Style.Triggers>
					<DataTrigger Binding="{Binding ActivityMode}">
						<DataTrigger.Value>
							<vm:Mode>Edit</vm:Mode>
						</DataTrigger.Value>
						<DataTrigger.Setters>
							<Setter Property="UIElement.IsHitTestVisible" Value="False" />
						</DataTrigger.Setters>
						<DataTrigger.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										Storyboard.TargetProperty="(Grid.Effect).(BlurEffect.Radius)"
										To="5" Duration="0:0:1" />
								</Storyboard>
							</BeginStoryboard>
						</DataTrigger.EnterActions>
						<DataTrigger.ExitActions>
							<BeginStoryboard>
								<Storyboard>
									<DoubleAnimation
										Storyboard.TargetProperty="(Grid.Effect).(BlurEffect.Radius)"
										To="0" Duration="0:0:0.3" />
								</Storyboard>
							</BeginStoryboard>
						</DataTrigger.ExitActions>
					</DataTrigger>
				</Style.Triggers>
			</Style>
		</Grid.Style>-->

		<!-- Buttons at the top, including breadcrumbs and switching between views. -->
		<StackPanel
			Orientation="Horizontal"
			HorizontalAlignment="Right"
			VerticalAlignment="Top"
			Margin="0, 10, 10, 0">
			<activityOverview:Breadcrumbs
				VerticalAlignment="Top"
				Visibility="{Binding ActivityMode, Converter={wtcConverters:EnumHasFlagConverter
					Flag={x:Static vm:Mode.Hierarchies},
					IfTrue={x:Static Visibility.Visible},
					IfFalse={x:Static Visibility.Hidden}}}"
				Height="30"
				Margin="0, 0, 10, 0" />
			<Border
				BorderBrush="#AAAAAA"
				BorderThickness="2"
				CornerRadius="5"
				Background="{Binding ActivityMode, Converter={wtcConverters:EnumHasFlagConverter
					Flag={x:Static vm:Mode.Activate},
					IfTrue={StaticResource HierarchiesActivitiesBrush},
					IfFalse={StaticResource PersonalActivitiesBrush}}}"
				Width="65" Height="65">
				<Button
					Command="{pf:CommandBinding {x:Static binding:Commands.SwitchPersonalHierarchies}}"
					Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
					<Image Source="Images/SwitchOverview.png" />
				</Button>
			</Border>
		</StackPanel>
		
		<!-- Time Line 3D -->
		<Viewport3D
			AllowDrop="True"
			DragEnter="OnTimeLineDragEnter"
			DragLeave="OnTimeLineDragLeave"
			DragOver="OnTimeLineDragOver"
			Drop="OnTimeLineDragDropped"
			ContextMenuOpening="OnContextMenuOpening"
			ClipToBounds="False"
			RenderOptions.EdgeMode="Aliased">
			
			<Viewport3D.ContextMenu>
				<ContextMenu>
					<MenuItem
						Header="_New Activity"
						Command="{pf:CommandBinding {x:Static binding:Commands.NewActivity}}">
						<MenuItem.Icon>
							<Image Source="Images\NewActivity.png" Width="20" Height="20" />
						</MenuItem.Icon>
					</MenuItem>
					<MenuItem
						Header="_Plan Activity Here"
						Command="{pf:CommandBinding {x:Static binding:Commands.PlanActivity}}">
						<MenuItem.Icon>
							<Image Source="Images\PlanActivity.png" Width="20" Height="20" />
						</MenuItem.Icon>
					</MenuItem>
				</ContextMenu>
			</Viewport3D.ContextMenu>
			
			<Viewport3D.CacheMode>
				<BitmapCache />
			</Viewport3D.CacheMode>

			<Viewport3D.Camera>
				<PerspectiveCamera
					Position="0 0 1"
					LookDirection="0 0 -1"
					UpDirection="0 1 0">
					<PerspectiveCamera.FieldOfView>
						<MultiBinding Converter="{StaticResource AspectRatioToFov}">
							<Binding ElementName="Container2D" Path="ActualWidth" />
							<Binding ElementName="Container2D" Path="ActualHeight" />
						</MultiBinding>
					</PerspectiveCamera.FieldOfView>
				</PerspectiveCamera>
			</Viewport3D.Camera>

			<ContainerUIElement3D>
				<ModelUIElement3D>
					<Model3DGroup>
						<AmbientLight Color="White" />
					</Model3DGroup>
				</ModelUIElement3D>
			</ContainerUIElement3D>

			<Viewport2DVisual3D>
				<Viewport2DVisual3D.CacheMode>
					<BitmapCache />
				</Viewport2DVisual3D.CacheMode>

				<Viewport2DVisual3D.Transform>
					<Transform3DGroup>
						<RotateTransform3D>
							<RotateTransform3D.CenterX>
								<MultiBinding Converter="{StaticResource AspectRatioToTransformOffset}">
									<Binding ElementName="Container2D" Path="ActualWidth" />
									<Binding ElementName="Container2D" Path="ActualHeight" />
								</MultiBinding>
							</RotateTransform3D.CenterX>
							<RotateTransform3D.Rotation>
								<AxisAngleRotation3D
									x:Name="RotationTransform"
									Angle="10" />
							</RotateTransform3D.Rotation>
						</RotateTransform3D>
					</Transform3DGroup>
				</Viewport2DVisual3D.Transform>

				<Viewport2DVisual3D.Geometry>
					<MeshGeometry3D
						TriangleIndices="0,1,2 2,3,0"
						TextureCoordinates="0 0, 0 1, 1 1, 1 0">
						<MeshGeometry3D.Positions>
							<MultiBinding Converter="{StaticResource AspectRatioToPositions}">
								<Binding ElementName="Container2D" Path="ActualWidth" />
								<Binding ElementName="Container2D" Path="ActualHeight" />
								<Binding ElementName="RotationTransform" Path="Angle" />
							</MultiBinding>
						</MeshGeometry3D.Positions>
					</MeshGeometry3D>
				</Viewport2DVisual3D.Geometry>
				
				<Viewport2DVisual3D.Material>
					<DiffuseMaterial Viewport2DVisual3D.IsVisualHostMaterial="True" />
				</Viewport2DVisual3D.Material>

				<Grid
					x:Name="FadeContainer">

					<Grid.CacheMode>
						<BitmapCache />
					</Grid.CacheMode>

					<Grid
						x:Name="TimeLineContainer"
						ClipToBounds="True"
						Background="{StaticResource TimeLineBrush}">

						<Grid.Width>
							<MultiBinding Converter="{StaticResource TimeLineWidthConverter}">
								<Binding ElementName="Container2D" Path="ActualWidth" />
								<Binding ElementName="Container2D" Path="ActualHeight" />
								<Binding ElementName="RotationTransform" Path="Angle" />
								<Binding Path="TimeLineRenderScale" />
							</MultiBinding>
						</Grid.Width>

						<Grid.Height>
							<MultiBinding Converter="{StaticResource TimeLineHeightConverter}">
								<Binding ElementName="Container2D" Path="ActualHeight" />
								<Binding Path="TimeLineRenderScale" />
							</MultiBinding>
						</Grid.Height>
						
						<timeline:TimeLine
							x:Name="TimeLine"
							Focusable="True"
							ItemsSource="{Binding Activities}"
							CurrentTime="{Binding CurrentTime}">
							
							<timeline:TimeLine.ItemContainerStyle>
								<Style TargetType="{x:Type timeline:TimeControlItem}">
									<Setter Property="wtcControls:TimePanel.IntervalX" Value="{Binding OpenInterval}" />
									<Setter Property="wtcControls:TimePanel.SizeY" Value="100" /> <!-- Show an 'activity time line' along the full height. -->
								</Style>
							</timeline:TimeLine.ItemContainerStyle>
							
							<timeline:TimeLine.ItemTemplate>
								<DataTemplate DataType="activityVm:ActivityViewModel">
									<timeline:TimeControl
										MinimumInterval="{x:Static system:TimeSpan.MinValue}"
										MaximumInterval="{x:Static system:TimeSpan.MaxValue}"
										VisibleInterval="{Binding OpenInterval}"
										ItemsSource="{Binding WorkIntervals}">

										<timeline:TimeControl.ItemContainerStyle>
											<Style TargetType="{x:Type timeline:TimeControlItem}">
												<Setter Property="wtcControls:TimePanel.X" Value="{Binding Occurance}" />
												<Setter Property="wtcControls:TimePanel.SizeX" Value="{Binding TimeSpan}" />
												<Setter Property="wtcControls:TimePanel.Y">
													<Setter.Value>
														<MultiBinding Mode="TwoWay">
															<MultiBinding.Converter>
																<activityConverters:IntervalOffsetConverter />
															</MultiBinding.Converter>
															<Binding Path="OffsetPercentage" Mode="TwoWay" />
															<Binding Path="HeightPercentage" />
														</MultiBinding>
													</Setter.Value>
												</Setter>
												<Setter
													Property="wtcControls:TimePanel.SizeY"
													Value="{Binding HeightPercentage, Converter={wtcConverters:CalculateValueConverter Operation=Multiplication, Value=100}}" />
											</Style>
										</timeline:TimeControl.ItemContainerStyle>

										<timeline:TimeControl.ItemTemplate>
											<DataTemplate DataType="activityVm:WorkIntervalViewModel">
												<controls:WorkIntervalControl />
											</DataTemplate>
										</timeline:TimeControl.ItemTemplate>
										
									</timeline:TimeControl>
								</DataTemplate>
							</timeline:TimeLine.ItemTemplate>
							
							<timeline:TimeLine.Resources>
								<Style TargetType="timeline:TimeIndicator">
									<Setter Property="Fill">
										<Setter.Value>
											<LinearGradientBrush StartPoint="0, 0" EndPoint="0, 1">
												<LinearGradientBrush.GradientStops>
													<GradientStop Offset="0" Color="Yellow" />
													<GradientStop Offset="1" Color="Transparent" />
												</LinearGradientBrush.GradientStops>
											</LinearGradientBrush>
										</Setter.Value>
									</Setter>
								</Style>
								<Style TargetType="timeline:TimeLineBreadcrumb">
									<Setter Property="Foreground" Value="WhiteSmoke" />
								</Style>
							</timeline:TimeLine.Resources>

						</timeline:TimeLine>

						<!-- Drag and drop icons. -->
						<!-- Setting IsHitTestVisible to false prevents the icon getting in the way of the dragging operation. -->
						<Canvas
							IsHitTestVisible="False" 
							Visibility="{Binding
							ElementName=Control,
							Path=IsSchedulingActivity,
							Converter={wtcConverters:FromBooleanConverter IfTrue={x:Static Visibility.Visible}, IfFalse={x:Static Visibility.Collapsed}}}">

							<Canvas x:Name="DragDropCursorPosition">
								<StackPanel
									Orientation ="Horizontal">
									<StackPanel.Resources>
										<BitmapImage x:Key="OpenTaskCursor" UriSource="Images\OpenTask.png" />
										<BitmapImage x:Key="PlanActivityCursor" UriSource="..\Common\calendar.png" />
									</StackPanel.Resources>
									<Image
										x:Name="DragDropCursor"
										Source="{Binding
											Path=IsFocusedTimeBeforeNow,
											Converter={wtcConverters:FromBooleanConverter IfTrue={StaticResource OpenTaskCursor}, IfFalse={StaticResource PlanActivityCursor}}}" />

									<TextBlock
										Text="{Binding FocusedRoundedTime, StringFormat='dddd, MMMM d, HH:mm'}"
										Margin="10, 0, 0, 0"
										Visibility="{Binding
											Path=IsFocusedTimeBeforeNow,
											Converter={wtcConverters:FromBooleanConverter IfTrue={x:Static Visibility.Collapsed}, IfFalse={x:Static Visibility.Visible}}}" />
								</StackPanel>
							</Canvas>

						</Canvas>
					</Grid>
				</Grid>

			</Viewport2DVisual3D>
		</Viewport3D>

		<!-- Bottom row icons, including to-do's and home activity. -->
		<StackPanel
			HorizontalAlignment="Stretch"
			VerticalAlignment="Bottom"
			ClipToBounds="True">	<!-- Clipping is needed here so grid layout is never stretched too far when the contents of this panel get too wide. -->
			
			<StackPanel
				Orientation="Horizontal"
				HorizontalAlignment="Right"
				VerticalAlignment="Bottom"
				Margin="0, 0, 10, 10">

				<taskList:TaskListControl
					VerticalAlignment="Bottom"
					Margin="0, 0, 20, 2"
					Height="35" />

				<Border
					Width="55"
					Height="55"
					Margin="0, 0, 20, 0"
					VerticalAlignment="Bottom"
					CornerRadius="5"
					BorderThickness="0, 0, 0, 2"
					AllowDrop="True"
					DragEnter="OnHomeDropOver" DragOver="OnHomeDropOver" DragLeave="OnHomeDropOver"
					Drop="OnHomeDrop"
					BorderBrush="{Binding HomeActivity.IsActive, Converter={wtcConverters:FromBooleanConverter IfTrue=Yellow, IfFalse=Transparent}}">

					<Button
						Cursor="Hand"
						Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
						Command="{pf:CommandBinding {x:Static binding:Commands.OpenHome}}">
						<Image Source="Images\Home.png" />
					</Button>

				</Border>

				<activityOverview:ClockControl
					x:Name="Clock"
					VerticalAlignment="Bottom"
					Time="{Binding CurrentTime}" />
			</StackPanel>
			
		</StackPanel>

		<!-- Background drop for popups. -->
		<Grid
			x:Name="Shadow"
			Background="Black"
			Opacity="0"
			IsHitTestVisible="False"
			ZIndex="100">
			<Grid.Style>
				<Style>
					<Style.Triggers>
						<DataTrigger Value="True" Binding="{Binding ActivityMode, Converter={wtcConverters:EnumHasFlagConverter Flag={x:Static vm:Mode.Edit}}}">
							<DataTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetProperty="Opacity"
											To="0.6" Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.EnterActions>
							<DataTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetProperty="Opacity"
											To="0" Duration="0:0:0.3" />
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.ExitActions>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Grid.Style>
		</Grid>
		
	</Grid>

</Window>